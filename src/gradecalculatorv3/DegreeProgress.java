/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gradecalculatorv3;

import static gradecalculatorv3.GCV4.connectToCollege;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JFrame;

/**
 *
 * @author EKUStudent
 */
public class DegreeProgress extends javax.swing.JFrame {

    /**
     * Creates new form DegreeProgress
     */
    public DegreeProgress() {
        initComponents();

        getDegreeProgress();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        concentrationsjComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        degreeProgressjTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        concentrationsjComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "General", "Technology", "Interactive Multimedia", "Bioinformatics", "Computer Forensics & Security", "Statistical Computing" }));
        concentrationsjComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                concentrationsjComboBox1ItemStateChanged(evt);
            }
        });

        jLabel1.setText("Choose a concentration:");

        jButton1.setText("Grade Calculator");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("GPA Calculator");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Edit/View Courses");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        degreeProgressjTextArea1.setEditable(false);
        degreeProgressjTextArea1.setColumns(20);
        degreeProgressjTextArea1.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        degreeProgressjTextArea1.setLineWrap(true);
        degreeProgressjTextArea1.setRows(5);
        jScrollPane1.setViewportView(degreeProgressjTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(0, 273, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(concentrationsjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(concentrationsjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void concentrationsjComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_concentrationsjComboBox1ItemStateChanged
        getDegreeProgress();
    }//GEN-LAST:event_concentrationsjComboBox1ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GCV4 gcv4 = new GCV4();
        String[] arguments = {};
        gcv4.main(arguments);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        GPACalculator gpacalc = new GPACalculator();
        String[] arguments = {};
        gpacalc.main(arguments);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Show the classes editor screen.
        JFrame frame = new JFrame("Classes");
        FinalGradesForm classAdder = new FinalGradesForm(frame);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void getDegreeProgress() {
        degreeProgressjTextArea1.setText("");
        // A new concentration was chose, so recalculate the degree progress.
        String concentrationSelection = concentrationsjComboBox1.getSelectedItem().toString();
        System.out.println("Conc. selection - " + concentrationSelection);
        degreeProgressjTextArea1.append(getCoreSatisfaction() + "\n");
        degreeProgressjTextArea1.append(getSupportingSatisfaction(concentrationSelection) + "\n");
        degreeProgressjTextArea1.append(getConcentrationSatisfaction(concentrationSelection) + "\n");
        degreeProgressjTextArea1.append(getGenEdE1() + "\n");
        degreeProgressjTextArea1.append(getGenEdE2() + "\n");
        degreeProgressjTextArea1.append(getGenEdE3() + "\n");
        degreeProgressjTextArea1.append(getGenEdE4() + "\n");
        degreeProgressjTextArea1.append(getGenEdE5() + "\n");
        degreeProgressjTextArea1.append(getGenEdE6() + "\n");
        degreeProgressjTextArea1.append(getWritingIntensiveSatisfaction() + "\n");

    }

    private String getConcentrationSatisfaction(String concentration) {
        if (concentration.equals("General")) {
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Concentration' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 24) {
                        return "You have completed all concentration coursework.";
                    } else {
                        return "You have " + (24 - hours) + " more hours of concentration coursework.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        } else if (concentration.equals("Statistical Computing")) {
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Concentration' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 9) {
                        return "You have completed all concentration coursework.";
                    } else {
                        return "You have " + (9 - hours) + " more hours of concentration coursework.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        } else if (concentration.equals("Technology")) {
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Concentration' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 18) {
                        return "You have completed all concentration coursework.";
                    } else {
                        return "You have " + (18 - hours) + " more hours of concentration coursework.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        } else if (concentration.equals("Interactive Multimedia")) {
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Concentration' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 21) {
                        return "You have completed all concentration coursework.";
                    } else {
                        return "You have " + (21 - hours) + " more hours of concentration coursework.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        } else if (concentration.equals("Bioinformatics")) {
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Concentration' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 9) {
                        return "You have completed all concentration coursework.";
                    } else {
                        return "You have " + (9 - hours) + " more hours of concentration coursework.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        } else {//Forensics & Security
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Concentration' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 24) {
                        return "You have completed all concentration coursework.";
                    } else {
                        return "You have " + (24 - hours) + " more hours of concentration coursework.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        }
    }

    private String getSupportingSatisfaction(String concentration) {
        if (concentration.equals("General")) {
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Supporting' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 26) {
                        return "You have completed all supporting coursework.";
                    } else {
                        return "You must complete 22-26 hours of supporting coursework. So far, you've completed " + hours + " hours.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        } else if (concentration.equals("Statistical Computing")) {
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Supporting' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 33) {
                        return "You have completed all supporting coursework.";
                    } else {
                        return "You must complete 32-33 hours of supporting coursework. So far, you've completed " + hours + " hours.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        } else if (concentration.equals("Technology")) {
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Supporting' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 25) {
                        return "You have completed all supporting coursework.";
                    } else {
                        return "You must complete 24-25 hours of supporting coursework. So far, you've completed " + hours + " hours.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        } else if (concentration.equals("Interactive Multimedia")) {
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Supporting' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 33) {
                        return "You have completed all supporting coursework.";
                    } else {
                        return "You must complete 30-33 hours of supporting coursework. So far, you've completed " + hours + " hours.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        } else if (concentration.equals("Bioinformatics")) {
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Supporting' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 48) {
                        return "You have completed all supporting coursework.";
                    } else {
                        return "You have " + (48 - hours) + " more hours of supporting coursework.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        } else {//Forensics & Security
            String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Supporting' AND final_grade != '' AND final_grade != 'F';";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    double hours = rs.getDouble(1);
                    if (hours >= 31) {
                        return "You have completed all supporting coursework.";
                    } else {
                        return "You have " + (31 - hours) + " more hours of supporting coursework.";
                    }
                }
                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
            return null;
        }
    }

    private String getCoreSatisfaction() {
        String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Core' AND final_grade != '' AND final_grade != 'F';";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                double hours = rs.getDouble(1);
                if (hours >= 25) {
                    return "You have completed all core coursework.";
                } else {
                    return "You have " + (25 - hours) + " more hours of core coursework.";
                }
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    private String getACCTSatisfaction() {
        String sql = "SELECT COUNT(*) FROM course WHERE (title LIKE 'CSC349%' OR title LIKE 'CSC440%' OR title LIKE 'CSC491%' OR title LIKE 'CSC549%' OR title LIKE 'CSC495%') AND final_grade != '' AND final_grade != 'F';";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                if (rs.getInt(1) == 0) {
                    return "You have not satisfied the ACCT requirement.";
                } else {
                    return "You have satisfied the ACCT requirement.";
                }
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    private String getWritingIntensiveSatisfaction() {
        String sql = "SELECT COUNT(*) FROM course WHERE title LIKE '%W' AND final_grade != '' AND final_grade != 'F';";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                if (rs.getInt(1) == 0) {
                    return "You have not satisfied the writing intensive requirement.";
                } else {
                    return "You have completed the writing intensive requirement.";
                }
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    private String getGenEdE1() {
        String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Gen Ed E1' AND final_grade != '' AND final_grade != 'F';";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                double hours = rs.getDouble(1);
                if (hours >= 6) {
                    return "You have completed general education element 1 coursework.";
                } else {
                    return "You have " + (6 - hours) + " more hours of general eductaion element 1 coursework.";
                }
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    private String getGenEdE2() {
        String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Gen Ed E2' AND final_grade != '' AND final_grade != 'F';";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                double hours = rs.getDouble(1);
                if (hours >= 3) {
                    return "You have completed general education element 2 coursework.";
                } else {
                    return "You have " + (3 - hours) + " more hours of general eductaion element 2 coursework.";
                }
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    private String getGenEdE3() {
        String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Gen Ed E3' AND final_grade != '' AND final_grade != 'F';";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                double hours = rs.getDouble(1);
                if (hours >= 6) {
                    return "You have completed general education element 3 coursework.";
                } else {
                    return "You have " + (6 - hours) + " more hours of general eductaion element 3 coursework.";
                }
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    private String getGenEdE4() {
        String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Gen Ed E4' AND final_grade != '' AND final_grade != 'F';";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                double hours = rs.getDouble(1);
                if (hours >= 6) {
                    return "You have completed general education element 4 coursework.";
                } else {
                    return "You have " + (6 - hours) + " more hours of general eductaion element 4 coursework.";
                }
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    private String getGenEdE5() {
        String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Gen Ed E5' AND final_grade != '' AND final_grade != 'F';";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                double hours = rs.getDouble(1);
                if (hours >= 6) {
                    return "You have completed general education element 5 coursework.";
                } else {
                    return "You have " + (6 - hours) + " more hours of general eductaion element 5 coursework.";
                }
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    private String getGenEdE6() {
        String sql = "SELECT SUM(credits) FROM course WHERE requirement_satisfaction LIKE 'Gen Ed E6' AND final_grade != '' AND final_grade != 'F';";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                double hours = rs.getDouble(1);
                if (hours >= 6) {
                    return "You have completed general education element 6 coursework.";
                } else {
                    return "You have " + (6 - hours) + " more hours of general eductaion element 6 coursework.";
                }
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DegreeProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DegreeProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DegreeProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DegreeProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DegreeProgress().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> concentrationsjComboBox1;
    private javax.swing.JTextArea degreeProgressjTextArea1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
