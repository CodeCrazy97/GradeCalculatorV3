/*
GUI for Budget App, Version 3
December, 2018
Ethan Vaughan
 */
package gradecalculatorv3;

import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

public class GCV3 extends javax.swing.JFrame {

    static DefaultTableModel model;  //Used to manage the rows in the jtable.

    public GCV3() {
        initComponents();
        model = (DefaultTableModel) gradesjTable.getModel();
        model.isCellEditable(gradesjTable.getSelectedRow(), gradesjTable.getSelectedColumn());
        //Set cursor to blinking in the whatIfGradeTextField
        whatIfGradeTextField.requestFocusInWindow();

        classNameTextField1.setVisible(false);
        descriptionTextField2.setVisible(false);
        gradeTextField3.setVisible(false);
        weightTextField1.setVisible(false);
        semesterYearTextField.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        gradesjTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return true;
            }
        };
        classesComboBox = new javax.swing.JComboBox<>();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        pPointsLabel = new java.awt.Label();
        currentGradeLabel = new java.awt.Label();
        button1 = new java.awt.Button();
        updateDatabaseButton = new java.awt.Button();
        button3 = new java.awt.Button();
        whatIfGradeTextField = new java.awt.TextField();
        desiredGradeTextField = new java.awt.TextField();
        button4 = new java.awt.Button();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        label9 = new java.awt.Label();
        addGradeButton = new java.awt.Button();
        deleteGradeByIndexButton = new java.awt.Button();
        deleteIndexTextField = new java.awt.TextField();
        createNewClassButton = new java.awt.Button();
        classNameTextField1 = new java.awt.TextField();
        descriptionTextField2 = new java.awt.TextField();
        gradeTextField3 = new java.awt.TextField();
        weightTextField1 = new java.awt.TextField();
        button2 = new java.awt.Button();
        semestersjComboBox1 = new javax.swing.JComboBox<>();
        label4 = new java.awt.Label();
        semesterYearTextField = new java.awt.TextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gradesjTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        gradesjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Grade (%)", "Weight (%)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return true;
            }
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        gradesjTable.setToolTipText("");
        gradesjTable.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        gradesjTable.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        gradesjTable.setRowSelectionAllowed(false);
        gradesjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                gradesjTableMousePressed(evt);
            }
        });
        gradesjTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                gradesjTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(gradesjTable);

        classesComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try{
                    //Fetch the grades, weights, and assignment names for the currently displayed class and display.
                    setGradeInformation(classesComboBox.getSelectedItem().toString(), semester);
                }catch(ClassNotFoundException cnfe) {

                } catch (NullPointerException npe) {

                }
            }
        });
        classesComboBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        classesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classesComboBoxActionPerformed(evt);
            }
        });

        label1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label1.setText("Classes:");

        label2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label2.setText("Current grade:");

        label3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label3.setText("Percentage points:");

        pPointsLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        pPointsLabel.setText("label2");

        currentGradeLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        currentGradeLabel.setText("label2");

        button1.setBackground(new java.awt.Color(204, 255, 204));
        button1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        button1.setLabel("Refresh Calculations");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        updateDatabaseButton.setBackground(new java.awt.Color(204, 255, 204));
        updateDatabaseButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        updateDatabaseButton.setLabel("Submit Changes");
        updateDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDatabaseButtonActionPerformed(evt);
            }
        });

        button3.setBackground(new java.awt.Color(255, 255, 204));
        button3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        button3.setLabel("Cancel");
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });

        whatIfGradeTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        whatIfGradeTextField.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        desiredGradeTextField.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        button4.setBackground(new java.awt.Color(204, 255, 204));
        button4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        button4.setLabel("Calculate");
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });

        label6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label6.setText("What if I made");

        label7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label7.setText("on remaining coursework?");

        label8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label8.setText("What do I have to make on remaining coursework to get");

        label9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label9.setText("overall?");

        addGradeButton.setBackground(new java.awt.Color(204, 255, 204));
        addGradeButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addGradeButton.setLabel("Add Grade");
        addGradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGradeButtonActionPerformed(evt);
            }
        });

        deleteGradeByIndexButton.setBackground(new java.awt.Color(204, 255, 204));
        deleteGradeByIndexButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        deleteGradeByIndexButton.setLabel("Delete Grade By Index:");
        deleteGradeByIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGradeByIndexButtonActionPerformed(evt);
            }
        });

        deleteIndexTextField.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        deleteIndexTextField.setText("Zero-indexed");
        deleteIndexTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deleteIndexTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                deleteIndexTextFieldFocusLost(evt);
            }
        });

        createNewClassButton.setBackground(new java.awt.Color(204, 255, 204));
        createNewClassButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        createNewClassButton.setLabel("Add A Class");
        createNewClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewClassButtonActionPerformed(evt);
            }
        });

        classNameTextField1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        classNameTextField1.setText("Class name (6 chars)");
        classNameTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                classNameTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                classNameTextField1FocusLost(evt);
            }
        });

        descriptionTextField2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        descriptionTextField2.setText("Initial assignment description");
        descriptionTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                descriptionTextField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                descriptionTextField2FocusLost(evt);
            }
        });

        gradeTextField3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        gradeTextField3.setText("Grade received (%)");
        gradeTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                gradeTextField3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                gradeTextField3FocusLost(evt);
            }
        });

        weightTextField1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        weightTextField1.setText("Assignment weight (%)");
        weightTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                weightTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                weightTextField1FocusLost(evt);
            }
        });

        button2.setBackground(new java.awt.Color(204, 255, 204));
        button2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        button2.setLabel("GPA Calculator");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        semestersjComboBox1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        label4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label4.setText("Semester:");

        semesterYearTextField.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        semesterYearTextField.setText("Semester + Year");
        semesterYearTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                semesterYearTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                semesterYearTextFieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(69, 69, 69))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(2, 2, 2)
                                            .addComponent(whatIfGradeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(140, 140, 140)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(2, 2, 2)
                                                .addComponent(desiredGradeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addContainerGap(77, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(deleteGradeByIndexButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addGradeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteIndexTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(classesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(223, 223, 223)
                        .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(semestersjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pPointsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentGradeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(classNameTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(gradeTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descriptionTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(createNewClassButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(242, 242, 242))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(379, 379, 379)
                        .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateDatabaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(semesterYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(193, 193, 193))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classesComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(semestersjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addGradeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(deleteGradeByIndexButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(deleteIndexTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(86, 86, 86)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(whatIfGradeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(desiredGradeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currentGradeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createNewClassButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pPointsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(classNameTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(descriptionTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(weightTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gradeTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(12, 12, 12)
                        .addComponent(updateDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(semesterYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        classesComboBox.getAccessibleContext().setAccessibleName("");
        label1.getAccessibleContext().setAccessibleName("classesLabel");
        label2.getAccessibleContext().setAccessibleName("describeCurrentGradeLabel");
        label3.getAccessibleContext().setAccessibleName("describePPointsLabel");
        pPointsLabel.getAccessibleContext().setAccessibleName("ppointsLabel");
        currentGradeLabel.getAccessibleContext().setAccessibleName("currentGradeLabel");
        button1.getAccessibleContext().setAccessibleName("refreshButton");
        updateDatabaseButton.getAccessibleContext().setAccessibleName("submitChangesToDatabaseButton");
        button3.getAccessibleContext().setAccessibleName("cancelButton");
        whatIfGradeTextField.getAccessibleContext().setAccessibleName("gradeDesiredTextField");
        desiredGradeTextField.getAccessibleContext().setAccessibleName("gradeNecessaryTextField");
        button4.getAccessibleContext().setAccessibleName("calculateButton");
        semestersjComboBox1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                //Show the classes for the currently selected semester.
                semester = semestersjComboBox1.getSelectedItem().toString();
                setClasses(semester);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        double totalWeights = 0;
        double pPoints = 0;

        totalWeights = getTotalWeights();
        pPoints = getTotalPPoints();

        try {
            double necessaryGrade = 0;  //This will be the grade you need on remaining assignments to get a desired grade.
            necessaryGrade = (Double.parseDouble(desiredGradeTextField.getText()) - pPoints) / (100 - totalWeights);
            necessaryGrade = Math.round(necessaryGrade * 1000) / 10.0;  //Put in proper format.

            double willHaveThisGrade = 0;  //This is the grade you will have if you make a specified grade on remaining assignments.
            try {
                willHaveThisGrade = (100 - totalWeights) * Double.parseDouble(whatIfGradeTextField.getText()) / 100 + pPoints;
                willHaveThisGrade = Math.round(willHaveThisGrade * 10) / 10.0;
            } catch (NumberFormatException nfe) {

            }

            //Create a jtextarea to yield the what-if results. 
            //(JTextAreas allow for font manipulation, as well as multi-line text.)
            JTextArea jta;
            if (necessaryGrade < 0 || necessaryGrade > 150) {  //In this case, most likely the student has completed all coursework or cannot reasonably make a specific grade in the course; necessaryGrade is irrelevant.
                jta = new JTextArea("If you make " + whatIfGradeTextField.getText() + "% on remaining coursework, you'll have " + willHaveThisGrade + "% overall.\n"
                        + " Furthermore, it appears that you have either completed all coursework OR will need an\n astronomical grade (>150%) on remaining coursework to earn " + desiredGradeTextField.getText() + "%.");
            } else {
                jta = new JTextArea("If you make " + whatIfGradeTextField.getText() + "% on remaining coursework, you'll have " + willHaveThisGrade + "% overall.\n"
                        + "\n In order to get " + desiredGradeTextField.getText() + "% overall, you'll need " + necessaryGrade + "% on remaining coursework.");
            }
            jta.setEditable(false);
            jta.setFont(new Font("Arial", Font.BOLD, 16));
            JOptionPane.showMessageDialog(null, jta, "What-If Results", JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException nfe) {

        }
    }//GEN-LAST:event_button4ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        desiredGradeTextField.setText("");
        whatIfGradeTextField.setText("");

        try {
            setGradeInformation(classesComboBox.getSelectedItem().toString(), semester);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GCV3.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Also, reset the adding a new grade option.
        classNameTextField1.setText("Class name (6 chars)");
        descriptionTextField2.setText("Initial assignment description");
        gradeTextField3.setText("Grade received");
        weightTextField1.setText("Assignment weight");
        semesterYearTextField.setText("Semester + Year");

        classNameTextField1.setVisible(false);
        descriptionTextField2.setVisible(false);
        gradeTextField3.setVisible(false);
        weightTextField1.setVisible(false);
        semesterYearTextField.setVisible(false);
    }//GEN-LAST:event_button3ActionPerformed

    //Refresh Button clicked.
    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        resetData(true);
    }//GEN-LAST:event_button1ActionPerformed

    private void resetData(boolean allowWarningMessage) {
        //New information about grades has been entered - reset data structures, but DON'T send anything to database.
        assignmentsInfo.clear();  //Get rid of old grades (descriptions, grade (decimal percent), and weight (%)).
        boolean showWarningMessageOnlyOnce = false;
        int currentRow = 0;
        //Remove blanked rows first.
        while (currentRow < gradesjTable.getRowCount()) {
            while (currentRow < gradesjTable.getRowCount() && gradesjTable.getModel().getValueAt(currentRow, 0).toString().equals("") && gradesjTable.getModel().getValueAt(currentRow, 1).toString().equals("") && gradesjTable.getModel().getValueAt(currentRow, 2).toString().equals("")) {
                model.removeRow(currentRow);
            }
            currentRow++;
        }
        for (int i = 0; i < gradesjTable.getRowCount(); i++) {  //Iterate over all rows.            
            try {
                assignmentsInfo.add(gradesjTable.getModel().getValueAt(i, 0).toString());  //Description    
                double grade = evaluateText(gradesjTable.getModel().getValueAt(i, 1).toString());
                assignmentsInfo.add("" + grade / 100.0);  //Grade (as a decimal)
                gradesjTable.getModel().setValueAt(grade, i, 1);  //Put the calculation in the cell.
                double weight = evaluateText(gradesjTable.getModel().getValueAt(i, 2).toString());
                assignmentsInfo.add("" + weight);  //Weight                
                gradesjTable.getModel().setValueAt(weight, i, 2);  //Put the calculation in the cell.
            } catch (NumberFormatException nfe) {
                //Rollback information about the last added grade.
                if (assignmentsInfo.size() % 3 == 2) {  //Remove the description, grade
                    assignmentsInfo.removeLast();
                    assignmentsInfo.removeLast();
                } else { //Remove the description 
                    assignmentsInfo.removeLast();
                }
                showWarningMessageOnlyOnce = true;
                System.out.println("ERROR: " + nfe);
                continue;
            }
        }
        if (allowWarningMessage && showWarningMessageOnlyOnce) {
            JOptionPane.showMessageDialog(this, "Something is wrong with your input.", "ENTRY ERROR", JOptionPane.WARNING_MESSAGE);
        }
        //Reset labels about percentage points and current grade in the class.
        resetPPointsAndCurrentGradeLabels();
    }

    //The only difference between this updateDatabaseButton and refreshButton is that the updater sends the 
    //newly entered data to the database. Both buttons will refresh calculations and data structures.
    //Also, the updater does not proceed if there is an error with the input.
    private void updateDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDatabaseButtonActionPerformed
        //New information about grades has been entered - reset data structures, but DON'T send anything to database.
        assignmentsInfo.clear();  //Get rid of old grades (descriptions, grade (decimal percent), and weight (%)).
        boolean showErrorMessageOnlyOnce = false;
        int currentRow = 0;
        //Remove blanked rows first.
        while (currentRow < gradesjTable.getRowCount()) {
            while (currentRow < gradesjTable.getRowCount() && gradesjTable.getModel().getValueAt(currentRow, 0).toString().equals("") && gradesjTable.getModel().getValueAt(currentRow, 1).toString().equals("") && gradesjTable.getModel().getValueAt(currentRow, 2).toString().equals("")) {
                model.removeRow(currentRow);
            }
            currentRow++;
        }
        for (int i = 0; i < gradesjTable.getRowCount(); i++) {  //Iterate over all rows.            
            try {
                assignmentsInfo.add(gradesjTable.getModel().getValueAt(i, 0).toString());  //Description    
                double grade = evaluateText(gradesjTable.getModel().getValueAt(i, 1).toString());  //Evaluate the grade entered; could be in the form of "125/140", or "100-93" or some mathematical entry.
                assignmentsInfo.add("" + grade / 100.0);  //Grade (as a decimal)
                gradesjTable.getModel().setValueAt(grade, i, 1);  //Put the calculation in the cell.
                double weight = evaluateText(gradesjTable.getModel().getValueAt(i, 2).toString());  //Evaluate the weight entered; could be in the form of "125/140", or "100-93" or some mathematical entry.
                assignmentsInfo.add("" + weight);  //Weight                
                gradesjTable.getModel().setValueAt(weight, i, 2);  //Put the calculation in the cell.
            } catch (NumberFormatException nfe) {
                //Rollback information about the last added grade.
                if (assignmentsInfo.size() % 3 == 2) {  //Remove the description, grade
                    assignmentsInfo.removeLast();
                    assignmentsInfo.removeLast();
                } else { //Remove the description 
                    assignmentsInfo.removeLast();
                }
                showErrorMessageOnlyOnce = true;
                System.out.println("ERROR: " + nfe);
                continue;
            }
        }
        if (showErrorMessageOnlyOnce) {
            JOptionPane.showMessageDialog(this, "Something is wrong with your input.", "ENTRY ERROR", JOptionPane.ERROR_MESSAGE);
        } else {  //Safe to send data to database.
            Querying q;
            try {
                q = new Querying();
                q.sendNewGradesToDatabase(assignmentsInfo, classesComboBox.getItemAt(classesComboBox.getSelectedIndex()), semester);
                JOptionPane.showMessageDialog(this, "Data was successfully submitted.", "SUCCESS!", JOptionPane.INFORMATION_MESSAGE);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GCV3.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(GCV3.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //Reset labels about percentage points and current grade in the class.
        resetPPointsAndCurrentGradeLabels();
    }//GEN-LAST:event_updateDatabaseButtonActionPerformed

    private void addGradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGradeButtonActionPerformed
        //Add a new row.
        model.insertRow(gradesjTable.getRowCount(), new Object[]{"", "", ""});
        //Set cursor to blinking in first cell of the new row.
        gradesjTable.editCellAt(gradesjTable.getRowCount() - 1, 0);
        Component editor = gradesjTable.getEditorComponent();
        editor.requestFocusInWindow();
    }//GEN-LAST:event_addGradeButtonActionPerformed

    private void deleteIndexTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deleteIndexTextFieldFocusGained
        //Clear the default text.
        deleteIndexTextField.setText("");
    }//GEN-LAST:event_deleteIndexTextFieldFocusGained

    private void deleteGradeByIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGradeByIndexButtonActionPerformed
        //Delete the grade that was specified.
        try {
            model.removeRow(Integer.parseInt(deleteIndexTextField.getText()));
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Something is wrong with your input.", "ENTRY ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteGradeByIndexButtonActionPerformed

    private void createNewClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewClassButtonActionPerformed
        if (!classNameTextField1.isVisible()) {  //First click.
            //Set text to defaults. Also change text in button.
            createNewClassButton.setLabel("Submit");

            classNameTextField1.setText("Class name (6 chars)");
            descriptionTextField2.setText("Initial assignment description");
            gradeTextField3.setText("Grade received");
            weightTextField1.setText("Assignment weight");
            semesterYearTextField.setText("Semester + Year");

            semesterYearTextField.setVisible(true);
            classNameTextField1.setVisible(true);
            descriptionTextField2.setVisible(true);
            gradeTextField3.setVisible(true);
            weightTextField1.setVisible(true);
            revalidate();
        } else {  //Second click.
            // Reset text in button.
            createNewClassButton.setLabel("Add A Class");
            createNewClassButton.setBounds(697, 477, 96, 24);  //Fits text "Add A Class"

            classNameTextField1.setVisible(false);
            descriptionTextField2.setVisible(false);
            gradeTextField3.setVisible(false);
            weightTextField1.setVisible(false);
            semesterYearTextField.setVisible(false);

            Querying q = null;
            try {
                q = new Querying();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GCV3.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                String newSemesterMaybe = semesterYearTextField.getText().toUpperCase();
                q.createAndInitializeNewClass(classNameTextField1.getText().toUpperCase(), "" + Double.parseDouble(gradeTextField3.getText()) / 100.0, weightTextField1.getText(), descriptionTextField2.getText(), newSemesterMaybe);
                //Place the new class in the combo box.
                if (!aNewSemester(newSemesterMaybe)) {  // semester does not already exist - add it!
                    semestersjComboBox1.addItem(newSemesterMaybe);
                }
                classesComboBox.addItem(classNameTextField1.getText().toUpperCase());

            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(this, "Something is wrong with your input. The class was NOT added to the database.", "ENTRY ERROR", JOptionPane.ERROR_MESSAGE);
            }
            revalidate();
        }
    }//GEN-LAST:event_createNewClassButtonActionPerformed

    public boolean aNewSemester(String semester) {
        for (int i = 0; i < semestersjComboBox1.getItemCount(); i++) {
            if (semestersjComboBox1.getItemAt(i).toString().equals(semester)) {
                return true;
            }
        }
        return false;
    }

    private void classNameTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_classNameTextField1FocusGained
        //Null out default text.
        classNameTextField1.setText("");
    }//GEN-LAST:event_classNameTextField1FocusGained

    private void gradeTextField3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_gradeTextField3FocusGained
        gradeTextField3.setText("");
    }//GEN-LAST:event_gradeTextField3FocusGained

    private void descriptionTextField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descriptionTextField2FocusGained
        descriptionTextField2.setText("");
    }//GEN-LAST:event_descriptionTextField2FocusGained

    private void weightTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_weightTextField1FocusGained
        weightTextField1.setText("");
    }//GEN-LAST:event_weightTextField1FocusGained

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        GPACalculator gpacalc = new GPACalculator();
        String[] arguments = {};
        gpacalc.main(arguments);
    }//GEN-LAST:event_button2ActionPerformed

    private void classesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classesComboBoxActionPerformed
        classesComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                whatIfGradeTextField.requestFocusInWindow();  //Set cursor to blinking in this text field.
            }
        });
    }//GEN-LAST:event_classesComboBoxActionPerformed

    //gradesjTableKeyReleased is called whenever the tab key is pressed (possibly other times, too).
    //Will want to set the cursor to blinking in the newly tabbed-into cell, as 
    //as reset the data (overall grade, percentage points earned) because the last
    //selected cell may have new data in it.
    private void gradesjTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gradesjTableKeyReleased
        setCursorBlinkingInSelectedTableCell();
        resetData(false);
    }//GEN-LAST:event_gradesjTableKeyReleased

    //gradesjTableMousePressed is called whenever the mouse is pressed.
    //Will want to set the cursor to blinking in the newly pressed-into cell, as 
    //as reset the data (overall grade, percentage points earned) because the last
    //selected cell may have new data in it.
    private void gradesjTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gradesjTableMousePressed
        setCursorBlinkingInSelectedTableCell();
    }//GEN-LAST:event_gradesjTableMousePressed

    private void classNameTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_classNameTextField1FocusLost
        if (classNameTextField1.getText().equals("")) {
            classNameTextField1.setText("Class name (6 chars)");
        }
    }//GEN-LAST:event_classNameTextField1FocusLost

    private void descriptionTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descriptionTextField2FocusLost
        if (descriptionTextField2.getText().equals("")) {
            descriptionTextField2.setText("Initial assignment description");
        }
    }//GEN-LAST:event_descriptionTextField2FocusLost

    private void gradeTextField3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_gradeTextField3FocusLost
        if (gradeTextField3.getText().equals("")) {
            gradeTextField3.setText("Grade received (%)");
        }
    }//GEN-LAST:event_gradeTextField3FocusLost

    private void weightTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_weightTextField1FocusLost
        if (weightTextField1.getText().equals("")) {
            weightTextField1.setText("Assignment weight (%)");
        }
    }//GEN-LAST:event_weightTextField1FocusLost

    private void deleteIndexTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deleteIndexTextFieldFocusLost
        if (deleteIndexTextField.getText().equals("")) {
            deleteIndexTextField.setText("Zero-indexed");
        }
    }//GEN-LAST:event_deleteIndexTextFieldFocusLost

    private void semesterYearTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_semesterYearTextFieldFocusGained
        if (semesterYearTextField.getText().equals("Semester + Year")) {
            semesterYearTextField.setText("");
        }

    }//GEN-LAST:event_semesterYearTextFieldFocusGained

    private void semesterYearTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_semesterYearTextFieldFocusLost
        if (semesterYearTextField.getText().equals("")) {
            semesterYearTextField.setText("Semester + Year");
        }
    }//GEN-LAST:event_semesterYearTextFieldFocusLost

    /**
     * @param args the command line arguments
     */
    public static String semester = "";
    public static LinkedList<String> assignmentsInfo = new LinkedList<>();

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GCV3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GCV3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GCV3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GCV3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                GCV3 gcv3Instance = new GCV3();

                //Query the database for classes.
                semester = "";
                Calendar rightNow = Calendar.getInstance();
                if (Integer.valueOf(rightNow.get(Calendar.MONTH)) < 6) {  //Spring semester.
                    semester = "SPRING ";
                } else {  //Fall semester.
                    semester = "FALL ";
                }
                semester += Calendar.getInstance().get(Calendar.YEAR);
                try {
                    //Put the semesters in the combo box.
                    LinkedList<String> semesters = new Querying().getSemesters();
                    for (int i = 0; i < semesters.size(); i++) {
                        semestersjComboBox1.addItem(semesters.get(i));
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(GCV3.class.getName()).log(Level.SEVERE, null, ex);
                }

                semester = semestersjComboBox1.getItemAt(0);
                //Put the classes for the current semester in the classes combo box.
                setClasses(semester);

                semestersjComboBox1.setSelectedIndex(0);  //Select the last semester (the most recent one).

                pPointsLabel.setText("" + Math.round(getTotalPPoints() * 10) / 10.0);

                gcv3Instance.setVisible(true);

            }
        });
    }

    public void setCursorBlinkingInSelectedTableCell() {
        //This method will make the cursor blink in the selected cell of the gradesjTable.
        gradesjTable.editCellAt(gradesjTable.getSelectedRow(), gradesjTable.getSelectedColumn());
        gradesjTable.getEditorComponent().requestFocusInWindow();
    }

    public static void setClasses(String semester) {
        //Clear out all classes that had previously been displayed.
        classesComboBox.removeAllItems();
        LinkedList<String> collegeClasses = new LinkedList<String>();
        try {
            Querying database = new Querying();
            collegeClasses = database.getClasses(semester);
            for (int i = 0; i < collegeClasses.size(); i++) {
                classesComboBox.addItem(collegeClasses.get(i));
            }

            classesComboBox.setSelectedIndex(0);
            //Fetch the grades, weights, and assignment names for the currently displayed class and display.
            setGradeInformation(classesComboBox.getSelectedItem().toString(), semester);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GCV3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void setGradeInformation(String className, String semester) throws ClassNotFoundException {
        gradesjTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        model.getDataVector().removeAllElements();  //Clear the items already displayed.
        model.fireTableDataChanged();

        Querying database = new Querying();
        assignmentsInfo = database.getGradesWeightsDescriptions(className, semester);
        for (int i = 0, j = 0; i < assignmentsInfo.size() - 2; i += 3, j++) {
            model.insertRow(j, new Object[]{assignmentsInfo.get(i), 100 * Double.parseDouble(assignmentsInfo.get(i + 1)), assignmentsInfo.get(i + 2)});
        }

        //Also, reload the ppoints label and currentGradeLabel.
        resetPPointsAndCurrentGradeLabels();
    }

    public static void resetPPointsAndCurrentGradeLabels() {
        double grade = getTotalPPoints() / getTotalWeights();
        grade = Math.round(grade * 1000) / 10.0;
        currentGradeLabel.setText("" + grade);
        pPointsLabel.setText("" + Math.round(getTotalPPoints() * 10) / 10.0);
    }

    public static double evaluateText(String text) {
        String[] parts = text.split("(?=[/*+-])|(?<=[/*+-])");

        try {
            double result = Double.parseDouble(parts[0]);

            for (int i = 1; i < parts.length; i += 2) {
                String op = parts[i];
                double val = Double.parseDouble(parts[i + 1]);
                switch (op) {
                    case "*":
                        result *= val;
                        break;
                    case "/":
                        if (result / val < 1.0) {  //Most likely in decimal format - need to convert to integer percent (like 89%).
                            result = (result / val) * 100;  //Turn into a number.
                        } else {  //No need to convert to integer
                            result /= val;
                        }
                        break;
                    case "+":
                        result += val;
                        break;
                    case "-":
                        result -= val;
                        break;
                }
            }
            return result;
        } catch (NumberFormatException nfe) {
            System.out.println("Problem parsing text.");
            throw new NumberFormatException();
        }
    }

    public static double getTotalPPoints() {
        double pPoints = 0;
        for (int i = 0; i < assignmentsInfo.size(); i += 3) {  //Iterate over grades.
            pPoints += Double.parseDouble(assignmentsInfo.get(i + 2)) * Double.parseDouble(assignmentsInfo.get(i + 1));
        }
        return pPoints;
    }

    public static double getTotalWeights() {
        double totalWeights = 0;
        for (int i = 0; i < assignmentsInfo.size(); i += 3) {  //Iterate over grades.
            totalWeights += Double.parseDouble(assignmentsInfo.get(i + 2));
        }
        return totalWeights;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button addGradeButton;
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Button button3;
    private java.awt.Button button4;
    private java.awt.TextField classNameTextField1;
    private static javax.swing.JComboBox<String> classesComboBox;
    private java.awt.Button createNewClassButton;
    private static java.awt.Label currentGradeLabel;
    private java.awt.Button deleteGradeByIndexButton;
    private java.awt.TextField deleteIndexTextField;
    private java.awt.TextField descriptionTextField2;
    private java.awt.TextField desiredGradeTextField;
    private java.awt.TextField gradeTextField3;
    private static javax.swing.JTable gradesjTable;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private static java.awt.Label pPointsLabel;
    private java.awt.TextField semesterYearTextField;
    private static javax.swing.JComboBox<String> semestersjComboBox1;
    private java.awt.Button updateDatabaseButton;
    private java.awt.TextField weightTextField1;
    private java.awt.TextField whatIfGradeTextField;
    // End of variables declaration//GEN-END:variables
}
